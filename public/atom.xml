<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[HTML5 Hacks]]></title>
  <link href="http://html5hacks.com/atom.xml" rel="self"/>
  <link href="http://html5hacks.com/"/>
  <updated>2012-11-18T10:13:31-08:00</updated>
  <id>http://html5hacks.com/</id>
  <author>
    <name><![CDATA[Jesse Cravens and Jeff Burtoft]]></name>
    <email><![CDATA[jesse.cravens@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Make Your Page Consumable by Robots and Humans Alike with Microdata]]></title>
    <link href="http://html5hacks.com/blog/2012/11/15/make-your-page-consumable-by-robots-and-humans-alike-with-microdata/"/>
    <updated>2012-11-15T22:34:00-08:00</updated>
    <id>http://html5hacks.com/blog/2012/11/15/make-your-page-consumable-by-robots-and-humans-alike-with-microdata</id>
    <content type="html"><![CDATA[<p>HTML5 microdata provides the mechanism for easily allowing machines to consume the data on your pages, while not affecting the experience for the user.</p>

<p>If you’re like me, you believe that in the future, machines will rule over us humans with an iron fist (provided, of course, that the Zombie Apocalypse doesn’t get us first). While there isn’t anything we can do to help the zombie masses understand the Internet, HTML5 does offer a feature that prepares us for that machine dictatorship. It’s called microdata, and it’s supposed to be for machines only—no humans allowed.</p>

<p>You can tell by now that HTML5 adds a lot of depth to your data, but up to this point the focus has been on your users. Microdata takes you down a slightly different path when you think about consumers who aren’t your users. Microdata is additional context you add to your markup to make it more consumable. When you build your page, you can add these additional attributes to give further context to your markup.</p>

<p>Microdata can be added to any page element to identify that element as an “item” or a high-level chunk of data. The content nested inside that item can then be labeled as properties. These properties essentially become name–value pairs when the itemprop becomes the value name and the human-readable content becomes the value. The relevant code would look something like this:</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module
Now imagine how consumable the Web would be for those machines of the future once microdata is utilized on every page!</p>

<p>In this hack we’ll use microdata to make sure our contact list is machine-readable. Each contact entry will be identified as an item, and its contents will be labeled as a property. Our first contact will look like this:</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>As you can see, we have constructed one data item on our page, and when the markup is machine-read it will see the item as something like this:
Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>Now let’s build ourselves a whole list:
Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>To our human friends the page looks something like Figure 1-14.</p>

<p><img class="figure" alt="Figure 1-14" src="http://html5hacks.com/images/chapter1-images/microdata1.jpg"></p>

<p>Figure 1-14. Adding microdata to the page, which does not change the view for users</p>

<p>To our machine friends, the code looks something like this:</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>It’s that easy to add microdata to your page without sacrificing the interface for your human friends.</p>

<h2>Details, Details!</h2>

<p>Microdata is pretty darn easy to implement, and the W3C spec thinks it should be just as easy to read, which is why the W3C added a JavaScript API to be able to access the data. Remember each of your identified elements was marked with an attribute called itemscope, which means the API considers them items. To get all these items, you simply call the following:</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>Now your items can also be segmented by type, so you can identify some of your items as people, and others as cats. Microdata allows you to define your items by adding the itemtype attribute, which will point to a URL, or have an inline definition. In this case, if we defined our cat type by referring to the URL http://example.com/feline, our cat markup would look something like this:</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>And if we wanted to get items with only a specific type of cat, we would call:</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>Thanks to this simple API, your microdata-enriched markup is both easy to produce and easy to consume.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overview of the GeoLocation Chapter in O'Reilly HTML5 Hacks]]></title>
    <link href="http://html5hacks.com/blog/2012/10/15/overview-of-the-geolocation-chapter-in-oreilly-html5-hacks/"/>
    <updated>2012-10-15T23:19:00-07:00</updated>
    <id>http://html5hacks.com/blog/2012/10/15/overview-of-the-geolocation-chapter-in-oreilly-html5-hacks</id>
    <content type="html"><![CDATA[<p>An exploration of the future of web technologies and browser capabilities would not be complete without covering the tools and techniques available to enable location awareness.</p>

<p>Location-aware web applications provide content, functionality, and services based on the cooperative detection of the user’s physical location. These applications can then provide the user with real-time filtering of online information relevant to his current location, such as place markers indicating the user’s location within a map, local consumer reviews, local coupons and offers, and even relevant traffic and public transportation notices.</p>

<p>These applications also enable users to provide their location to friends in a social network and vice versa, creating possibilities for meetups and blended online and physical interaction.</p>

<p>As you might imagine, the opportunities are not just limited to enhancing the life of the consumer. Given real-time location data of potential consumers and their friends, retailers can also create highly targeted, location-specific marketing campaigns for both digital and physical products.</p>

<h2>How Does It Work?</h2>

<p>The web browser employs various technologies to pass parameters via a background HTTP request to a Location Information Server that returns a data set that includes an estimated longitude and latitude.</p>

<p>The technologies used to gather location data depend on the device and on the operating system running on the device. The most common sources are:</p>

<ul>
<li>Public IP address</li>
<li>WiFi access points</li>
<li>Bluetooth MAC IDs</li>
<li>GPS</li>
<li>GSM/CDMA cell tower IDs</li>
</ul>


<p>Geolocation libraries for the Web are not new. In fact, today’s W3C Geolocation specification is largely reflective of the original Google Gears API introduced by Google in 2008. The API has been standardized and is one of the most widely adopted of the HTML5 specifications covered in this book (O&#8217;Reilly HTML5 Hacks).</p>

<p>Fortunately, the API is also easy to use—a benefit we will explore in “Use the Geolocation APIs to Display Longitude and Latitude in a Mobile Web Application” and “Update a User’s Current Location in a Google Map”.</p>

<p>In addition, a number of third-party services are available for creating really interesting hacks, and they explore concepts such as reverse geocoding and geofencing. In “Use Google’s Geocoding API to Reverse-Geocode a User’s Location” and “Use the Geoloqi Service to Build a Geofence” we will pass our location data to a service that will provide an enhanced API for working with location data.
In “Use the Geoloqi Real-Time Streaming Service to Broadcast a Remote User’s Movement” we will blend the power of the WebSocket API with location awareness to make our application update in real time.</p>

<p>For browsers that don’t provide this functionality natively, Google’s IP geocoding service can serve as a polyfill, as we will explore in “Polyfill Geolocation APIs with Webshims”.</p>

<p>The main drawback to this functionality is related to privacy and security, and for good reason. After all, as responsible application developers we should be doing what we can to protect the sensitive data of our users. In “Use the Geolocation APIs to Display Longitude and Latitude in a Mobile Web Application” we will take an in-depth look at how the browser employs cooperative detection, allowing the user to opt-in to only sharing location data with trusted web applications.</p>

<p>Want to read more detail? &#8230; <a href="http://shop.oreilly.com/product/0636920026273.do?sortby=bestSellers">buy the book</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use the GeoLocation API to Display Long/Lat in a jQuery Mobile App]]></title>
    <link href="http://html5hacks.com/blog/2012/10/15/use-the-geolocation-api-to-display-long-slash-lat-in-a-jquery-mobile-app/"/>
    <updated>2012-10-15T23:15:00-07:00</updated>
    <id>http://html5hacks.com/blog/2012/10/15/use-the-geolocation-api-to-display-long-slash-lat-in-a-jquery-mobile-app</id>
    <content type="html"><![CDATA[<p>The Geolocation specification exposes an easy-to-use API. With only a couple of lines of code, you can obtain the user’s current position. What’s more, jQuery Mobile provides a simple framework for building a cross-browser mobile web application.</p>

<p>In this hack we will utilize the jQuery Mobile framework to provide a relatively simple means of authoring a cross-browser mobile application. Since this hack is focused on displaying our current longitude and latitude and exercising the API across the mobile Web, we will only need a simple UI.</p>

<h3>A Simple jQuery Mobile App</h3>

<p>As always, we’ll start by building a basic page utilizing the HTML5 doctype and including our dependencies:</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>As you can see, we have declared a dependency on one stylesheet, and three JavaScripts. We will build the remainder of the application using declarative HTML markup and data- attributes that the jQuery Mobile framework will interpret.<br/>
Within the <body> tag, we can now place the following:</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>At this point you should see what’s shown in Figure 7-1, if you access this page from a smaller screen or shrink your desktop browser window to the size of a mobile browser.</p>

<p>Figure 7-1. jQuery Mobile simple button</p>

<p><img class="figure" alt="Figure 7-1" src="http://html5hacks.com/images/chapter7-images/7-1.png"></p>

<p>As you might expect, the UI wasn’t created through magic. jQuery Mobile uses JavaScript to consume the data- attributes present in your HTML markup to dynamically generate more HTML and CSS. The end result is what you see in your browser.
Now we will create a separate page to link to. You many have noticed a link to longlat-embed.html within the main page.</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>This will take us to a page that will run our JavaScript that contains our geolocation code. Notice that we designated for this to not be a jQuery Mobile Ajax page. This ensures that upon the click of the link we navigate to the new page. It is important that the linked page is loaded so that its JavaScript will execute.</p>

<p>This page is structured similarly to the other page, with the same dependencies. I intentionally kept the jQuery Mobile code as simple as possible. You can find more information on working with jQuery Mobile in the excellent set of <a href="http://jquerymobile.com/demos/1.1.1/">documentation</a> .</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>In the content, we will create a div element that will contain our longitude and latitude data once it is returned from the remote service. We will also include a back capability to return to the previous page.</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>Now we will address our geolocation JavaScript. If you are familiar with jQuery the initial $ variable will look familiar in the code that follows. If not, you can learn more about jQuery at http://docs.jquery.com/Main_Page.</p>

<p>Simply put, the jQuery function wrapper ensures that our page is ready before we execute the following script. Then we will set up a global namespace object that we will use to store our data. This type of organization will be important as our script gets more complex moving forward.</p>

<p>Next, we will check to make sure the current browser supports geolocation by checking the navigator object for the presence of the geolocation property. If it is available, we will call the getCurrentPosition method and pass a success and error object.
Then we will construct both a success and error object. Within our success object we can accept a position as a parameter and query the object for its nested coords object which contains both latitude and longitude properties.</p>

<p>We will then call populateHeader(), which uses jQuery to append the returned values to the span tags that contain the IDs Lat and Long.</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>Now let’s return to our browser and navigate to the new page. When a user accesses a web page that includes a call to navigator.geolocation.getCurrentPosition(), a security notification bar will be presented at the top of the page. Browsers that support the Geolocation API have their own security notification, which asks the user to allow or deny the browser access to the device’s current location (see Figure 7-2).</p>

<p>Figure 7-2. Google Chrome geolocation security notification</p>

<p><img class="figure" alt="Figure 7-2" src="http://html5hacks.com/images/chapter7-images/7-2.png"></p>

<p>If the user allows the web application to track her physical location, the script will continue to execute and make a request to the Location Information Server. The remote server returns a data set that includes longitude and latitude. Once we have the information and the success() callback has been called, we update the page (see Figure 7-3).</p>

<p>Figure 7-3. Latitude and longitude</p>

<p><img class="figure" alt="Figure 7-3" src="http://html5hacks.com/images/chapter7-images/7-3.png"></p>

<h3>Security and Privacy Concerns</h3>

<p>The ability for web application developers to collect location data about end users raises quite a bit of concern in regard to security and privacy. The W3C specification clearly indicates that client applications should notify users and provide an interface to authorize the use of location data, allowing them to determine which web applications they trust:</p>

<p>User agents must not send location information to Web sites without the express permission of the user. User agents must acquire permission through a user interface, unless they have prearranged trust relationships with users, as described below. The user interface must include the host component of the document&#8217;s URI [URI]. Those permissions that are acquired through the user interface and that are preserved beyond the current browsing session (i.e. beyond the time when the browsing context [BROWSINGCONTEXT] is navigated to another URL) must be revocable and user agents must respect revoked permissions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Workers: Basics of the Web Browser's UI Thread]]></title>
    <link href="http://html5hacks.com/blog/2012/09/22/web-workers-basics-of-the-web-browsers-ui-thread/"/>
    <updated>2012-09-22T23:44:00-07:00</updated>
    <id>http://html5hacks.com/blog/2012/09/22/web-workers-basics-of-the-web-browsers-ui-thread</id>
    <content type="html"><![CDATA[<h2>Single Threadin&#8217;</h2>

<p>As we set out to build a highly responsive UI for our demo web application, we must fully understand how browsers manage processes. Perhaps the biggest challenge we will face has to do with browsers using a single thread for both JavaScript execution and user interface updates. While the browser&#8217;s JavaScript interpreter is executing code, the UI is unable to respond to the user&#8217;s input. If a script is taking a long time to complete, after a specified amount of time the browser will provide the user an option to terminate the script. To accommodate for the &#8216;freeze&#8217; associated with scripts that exceed the browser execution time limit, web developers have traditionally created smaller units of work and used JavaScript timers to return execution to the next event in the queue. As you will see, web workers solve the locking of the UI thread by opening an additional thread, or even multiple threads, for execution of these long running, processor intensive tasks.</p>

<p>When designing your application, especially if you come from more of a &#8216;server-side&#8217; or Java background, it is important to understand that non-blocking execution is not the same as concurrent threading. While not extremely complex, JavaScript&#8217;s event driven style does take some getting used to for developers coming from other languages such as Java and C. Later, we will touch on a few examples where we pass a callback continuation function to take full advantage of JavaScript&#8217;s non blocking design.</p>

<h2>Thread Safety</h2>

<p>Mozilla, in particular, provides a Worker interface which web workers implement. While the Worker interface spawns OS-level threads, web workers use the postMessage mechanism to send messages (with serializable objects) between the two execution contexts. To ensure thread safety the worker is only given access to thread safe components to include the following:</p>

<ul>
<li>timers: setTimeout() and setInterval() methods</li>
<li>XMLHttpRequest</li>
<li>importScripts() method</li>
</ul>


<p>The worker script can also make use of:</p>

<ul>
<li>navigator and location objects</li>
<li>native JavaScript objects such as Object, String, Date</li>
</ul>


<p>At the same time, the worker restricts access to DOM APIs, global variables, and the parent page. In Hack #84 Building the DOM with web workers and Handlebars.js, we will explore the restricted access to DOM APIs, and introduce JavaScript templating, importScripts, and the use of timers to poll for postMessage.</p>

<h2>HTML5 Web Workers</h2>

<p>As mentioned earlier, the Web worker spec defines an API for executing scripts in the background by spawning an independent execution context.</p>

<p>It is important to note that web workers are costly, having an impact on startup and overall memory consumption. So, they are intended to be used lightly and in conjunction with the some of the asynchronous techniques mentioned earlier. A well built client-side application would typically make use of one or two cases where tasks are expensive. Here are a few common uses cases:</p>

<ul>
<li>Single Page Application bootstrapping large amounts of data during initial load</li>
<li>Performing long running mathematical calculations in the browser</li>
<li>Processing large JSON datasets</li>
<li>Text formatting, spell checking, and syntax highlighting</li>
<li>Processing multimedia data (Audio/Video)</li>
<li>Long polling webservices</li>
<li>Filtering images in canvas</li>
<li>Calculating points for a 3D image</li>
<li>Reading/Writing of local storage database</li>
</ul>


<h2>Long Running Scripts</h2>

<p>Our first web worker hack will be a long running script with heavy computation. It will execute 2 loops that output a two-dimensional array. First, we will use this computation to lock up the browser&#8217;s UI thread, and later we will move the task to a worker.</p>

<p>Liquid error: No such file or directory - python -c &#8220;import sys; print sys.executable&#8221;</p>

<h2>Spawning a Worker</h2>

<p>Now let&#8217;s move our heavy computational task to a dedicated web worker, so that the user doesn&#8217;t have to wait for the script to complete execution in order to interact with user interface. First, lets spawn a new worker:</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>Here, we define an external file that will contain the logic of our heavy computational task. The file, highComp.js will listen for a message that will receive the serialized JSON payload, and then we will set up an additional listener to receive a message back from highComp.js.</p>

<p>Now, we can move this cpu-intensive task to a separate file: highComp.js</p>

<p>Liquid error: undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</p>

<p>In highComp.js, our two dimensional array is built and set to variable a. It is then passed back to our main script via the postMessage call.</p>

<p>In the next hack, we will mix our use of timers with the power of a dedicated worker. As we send messages (passing serializable objects as a parameter to postMessage) back and forth to code running in the shared UI thread, our timer will periodically send and check for new messages and use their contents to modify the DOM.</p>
]]></content>
  </entry>
  
</feed>
