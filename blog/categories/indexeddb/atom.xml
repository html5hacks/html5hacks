<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: IndexedDB | HTML5 Hacks]]></title>
  <link href="http://html5hacks.com/blog/categories/indexeddb/atom.xml" rel="self"/>
  <link href="http://html5hacks.com/"/>
  <updated>2014-12-30T19:50:36-06:00</updated>
  <id>http://html5hacks.com/</id>
  <author>
    <name><![CDATA[Jesse Cravens and Jeff Burtoft]]></name>
    <email><![CDATA[jesse.cravens@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Build a Milestone Calendar with IndexedDB and FullCalendar.js]]></title>
    <link href="http://html5hacks.com/blog/2013/01/17/build-a-milestone-calendar-with-indexeddb-and-fullcalendar-dot-js/"/>
    <updated>2013-01-17T08:47:00-06:00</updated>
    <id>http://html5hacks.com/blog/2013/01/17/build-a-milestone-calendar-with-indexeddb-and-fullcalendar-dot-js</id>
    <content type="html"><![CDATA[<h4>IndexedDB is a persistent object data store in the browser. Although it is not a full SQL implementation and it is more complex than the unstructured key–value pairs in localStorage, you can use it to define an API that provides the ability to read and write key–value objects as structured JavaScript objects, and an indexing system that facilitates filtering and lookup.</h4>

<p>For this hack we will use IndexedDB to store milestone objects for a calendar application. The UI will provide a simple means to create a new milestone and provide a title, start date, and end date. The calendar will then update to show the contents of the local data store. Figure 6-8 shows the result.</p>

<p>Figure 6-8. FullCalendar.js and IndexedDB</p>

<p><img class="figure" alt="Figure 6-8" src="http://html5hacks.com/images/chapter6-images/6-8.png"></p>

<p>We need to start by including the markup for the two pieces of the UI: the calendar and the form.
We’ll begin with the form. You may notice that the input fields for the dates include data-date-format attributes. We will use these later for the JavaScript date pickers.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>milestone form </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;form>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> &lt;fieldset&gt;
</span><span class='line'>
</span><span class='line'>   &lt;div class="control-group"&gt;
</span><span class='line'>     &lt;label class="control-label"&gt;Add a Milestone&lt;/label&gt;
</span><span class='line'>     &lt;div class="controls"&gt;
</span><span class='line'>       &lt;h2&gt;New Milestone&lt;/h2&gt;
</span><span class='line'>       &lt;input type="text" name="title" value=""&gt;
</span><span class='line'>       &lt;input type="text" class="span2" name="start"
</span><span class='line'>         value="07/16/12" data-date-format="mm/dd/yy" id="dp1" &gt;
</span><span class='line'>       &lt;input type="text" class="span2" name="end"
</span><span class='line'>         value="07/17/12"  data-date-format="mm/dd/yy" id="dp2" &gt;
</span><span class='line'>     &lt;/div&gt;
</span><span class='line'>   &lt;/div&gt;
</span><span class='line'>
</span><span class='line'>   &lt;div class="form-actions"&gt;
</span><span class='line'>      &lt;button type="submit" class="btn btn-primary"&gt;Save&lt;/button&gt;
</span><span class='line'>      &lt;button class="btn"&gt;Cancel&lt;/button&gt;
</span><span class='line'>   &lt;/div&gt;
</span><span class='line'>
</span><span class='line'>  &lt;/fieldset&gt;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p> &lt;/form></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The calendar is provided by <a href="http://arshaw.com/fullcalendar/">FullCalendar.js</a>, a fantastic jQuery plug-in for generating robust calendars from event sources. The library will generate a calendar from a configuration object and a simple div.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>simple div </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;div id='calendar'>&lt;/div>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And we can’t forget to include a few dependencies:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>CSS and JavaScript dependencies </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;link href="../assets/css/datepicker.css" rel="stylesheet">
</span><span class='line'>&lt;link href="../assets/css/fullcalendar.css" rel="stylesheet">&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;script src="http://code.jquery.com/jquery-1.7.1.min.js">&lt;/script>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;script src="../assets/js/bootstrap-datepicker.js">&lt;/script>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;script src="../assets/js/fullcalendar.min.js">&lt;/script>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To improve the user experience, we will also include date pickers for choosing the dates within the form fields for start and end dates (see Figure 6-9).</p>

<p>Figure 6-9. Date pickers</p>

<p><img class="figure" alt="Figure 6-9" src="http://html5hacks.com/images/chapter6-images/6-9.png"></p>

<p>To instantiate the date pickers we will include the following toward the beginning of our script:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>instantiate the date pickers </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$(function(){&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>$('#dp1').datepicker();
</span><span class='line'>$('#dp2').datepicker();
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  });</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>The Milestone IndexedDB</h3>

<p>Now we will set up a global namespace to hold our code, and set up a public milestones array (within the namespace) to hold our milestones temporarily while we pass them between our database and the FullCalendar API. This should make more sense as you continue to read. While we are at it we will need to normalize our indexedDB variable across all of the vendor-specific properties.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>namespace and normalize </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var html5hacks = {};&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>html5hacks.msArray = [];&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>var indexedDB = window.indexedDB || window.webkitIndexedDB ||&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>            window.mozIndexedDB;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>if (&lsquo;webkitIndexedDB&rsquo; in window) {
</span><span class='line'>  window.IDBTransaction = window.webkitIDBTransaction;
</span><span class='line'>  window.IDBKeyRange = window.webkitIDBKeyRange;
</span><span class='line'>}
</span><span class='line'>Now we can begin to set up our database:
</span><span class='line'>html5hacks.indexedDB = {};
</span><span class='line'>html5hacks.indexedDB.db = null;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>function init() {
</span><span class='line'>  html5hacks.indexedDB.open();
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>init();</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This will obviously fail for now, but as you can see the initialization begins by calling the open() method on an html5hacks.indexedDB. So let’s take a closer look at open():</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>open() </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>html5hacks.indexedDB.open = function() {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  var request = indexedDB.open(&ldquo;milestones&rdquo;);&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  request.onsuccess = function(e) {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>var v = "1";
</span><span class='line'>html5hacks.indexedDB.db = e.target.result;
</span><span class='line'>
</span><span class='line'>var db = html5hacks.indexedDB.db;
</span><span class='line'>
</span><span class='line'>if (v!= db.version) {
</span><span class='line'>  var setVrequest = db.setVersion(v);
</span><span class='line'>  setVrequest.onerror = html5hacks.indexedDB.onerror;
</span><span class='line'>
</span><span class='line'>  setVrequest.onsuccess = function(e) {
</span><span class='line'>    if(db.objectStoreNames.contains("milestone")) {
</span><span class='line'>      db.deleteObjectStore("milestone");
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    var store = db.createObjectStore("milestone",
</span><span class='line'>      {keyPath: "timeStamp"});
</span><span class='line'>
</span><span class='line'>    html5hacks.indexedDB.init();
</span><span class='line'>  };
</span><span class='line'>}
</span><span class='line'>else {
</span><span class='line'>  html5hacks.indexedDB.init();
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  };
</span><span class='line'>  request.onerror = html5hacks.indexedDB.onerror;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>First, we need to open the database and pass a name. If the database successfully opens and a connection is made, the onsuccess() callback will be fired.</p>

<p>Within the onsuccess, we then check for a version and call setVersion() if one does not exist. Then we will call createObjectStore() and pass a unique timestamp within the keypath property.</p>

<p>Finally, we call init() to build the calendar and attach the events present in the database.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>onsuccess() </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>html5hacks.indexedDB.init = function() {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  var db = html5hacks.indexedDB.db;
</span><span class='line'>  var trans = db.transaction([&ldquo;milestone&rdquo;], IDBTransaction.READ_WRITE);
</span><span class='line'>  var store = trans.objectStore(&ldquo;milestone&rdquo;);&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  var keyRange = IDBKeyRange.lowerBound(0);
</span><span class='line'>  var cursorRequest = store.openCursor(keyRange);&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  cursorRequest.onsuccess = function(e) {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>var result = e.target.result;
</span><span class='line'>
</span><span class='line'>if(!result == false){
</span><span class='line'>
</span><span class='line'>    $('#calendar').fullCalendar({
</span><span class='line'>      header: {
</span><span class='line'>        left: 'prev,next today',
</span><span class='line'>        center: 'title',
</span><span class='line'>        right: 'month,agendaWeek,agendaDay'
</span><span class='line'>      },
</span><span class='line'>      weekmode: 'variable',
</span><span class='line'>      height: 400,
</span><span class='line'>      editable: true,
</span><span class='line'>      events: html5hacks.msArray
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>  return;
</span><span class='line'>
</span><span class='line'>}else{
</span><span class='line'>
</span><span class='line'>  console.log("result.value" , result.value);
</span><span class='line'>  buildMilestoneArray(result.value);
</span><span class='line'>  result.continue();
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  };
</span><span class='line'>  cursorRequest.onerror = html5hacks.indexedDB.onerror;
</span><span class='line'>};&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>At this point we are poised to retrieve all the data from the database and populate our calendar with milestones.
First, we declare the type of transaction to be a READ_WRITE, set a reference to the datastore, set a keyrange, and define a cursorRequest by calling openCursor and passing in the keyrange. By passing in a 0, we ensure that we retrieve all the values greater than zero. Since our key was a timestamp, this will ensure we retrieve all the records.</p>

<p>Once the onsuccess event is fired, we begin to iterate through the records and push the milestone objects to buildMilestoneArray:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>buildMilestoneArray() </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function buildMilestoneArray(ms) {
</span><span class='line'>  html5hacks.msArray.push(ms);
</span><span class='line'>}
</span><span class='line'>When we reach the last record, we build the calendar by passing a configuration object to fullCalendar() and returning:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>    $('#calendar').fullCalendar({
</span><span class='line'>      header: {
</span><span class='line'>        left: 'prev,next today',
</span><span class='line'>        center: 'title',
</span><span class='line'>        right: 'month,agendaWeek,agendaDay'
</span><span class='line'>      },
</span><span class='line'>      weekmode: 'variable',
</span><span class='line'>      height: 400,
</span><span class='line'>      editable: true,
</span><span class='line'>      events: html5hacks.msArray
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>  return;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Adding Milestones</h3>

<p>Now that we are initializing and building our calendar, we need to begin adding milestones to the database via the form. First let’s use jQuery to set up our form to pass a serialized data object to addMilestone() on each submission:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>form submit </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$(&lsquo;form&rsquo;).submit(function() {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>var data = $(this).serializeArray();
</span><span class='line'>
</span><span class='line'>html5hacks.indexedDB.addMilestone(data);
</span><span class='line'>return false;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  });</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now let’s submit a few events and then view them in the Chrome Inspector to ensure they are there (see Figure 6-10).</p>

<p>Figure 6-10. Viewing milestone objects in the Chrome Inspector</p>

<p><img class="figure" alt="Figure 6-10" src="http://html5hacks.com/images/chapter6-images/6-10.png"></p>

<p>Let’s take a closer look at our addMilestone method:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>addMilestone() </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>html5hacks.indexedDB.addMilestone = function(d) {
</span><span class='line'>  var db = html5hacks.indexedDB.db;
</span><span class='line'>  var trans = db.transaction([&ldquo;milestone&rdquo;], IDBTransaction.READ_WRITE);
</span><span class='line'>  var store = trans.objectStore(&ldquo;milestone&rdquo;);&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  var data = {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>"title": d[0].value,
</span><span class='line'>"start": d[1].value,
</span><span class='line'>"end": d[2].value,
</span><span class='line'>"timeStamp": new Date().getTime()
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  };&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  var request = store.put(data);&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  var dataArr = [data]
</span><span class='line'>  request.onsuccess = function(e) {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>$('#calendar').fullCalendar('addEventSource', dataArr);
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  };&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  request.onerror = function(e) {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>console.log("Error Adding: ", e);
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  };
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We established our read/write connection in much the same way as our html5hacks.indexedDB.init(), but now, instead of only reading data, we write a data object to the data store each time by calling store.put() and passing it data. On the onsuccess we then can call fullcalendar’s addEventSource() and pass it the data wrapped in an array object. Note that it is necessary to transform the data object into an array since that is what the FullCalendar API expects.</p>
]]></content>
  </entry>
  
</feed>
